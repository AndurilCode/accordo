---
description: 
globs: 
alwaysApply: true
---
## Task Execution Guidelines

### When to Use Workflow Tools
- **Simple tasks**: Handle directly without tools (e.g., basic calculations, straightforward code edits, simple explanations)
- **Complex tasks**: Always use `workflow_guidance` for multi-step problems, tasks requiring coordination across files, or when explicit planning would help

### Dynamic Workflow System
The workflow system is now fully dynamic and schema-driven:

1. **Workflow Discovery**: The system automatically discovers available workflows from `.workflow-commander/workflows/` directory
2. **Agent Choice**: You choose which workflow to use based on the task requirements - no automated scoring
3. **Schema-Driven Navigation**: Workflow transitions are determined by the YAML schema (`next_allowed_nodes` and `next_allowed_workflows`)
4. **Context Parameters**: Control workflow execution using context like `context="choose: node_name"` or `context="workflow: Workflow Name"`

### Workflow Discovery Process
**⚠️ CRITICAL START POINT:** For complex tasks, choose one of these approaches:

#### Option 1: Use Existing Workflows (Recommended)
1. **Discover Available Workflows:**
   ```
   workflow_discovery(task_description="Your task description")
   ```
   This shows all available YAML workflows and their capabilities.

2. **Start Selected Workflow:**
   ```
   workflow_guidance(action="start", context="workflow: <chosen_workflow_name>")
   ```

#### Option 2: Create Custom Workflow (When existing workflows don't fit)
1. **Get Creation Guidance:**
   ```
   workflow_creation_guidance(task_description="Your task description", workflow_type="coding/debugging/documentation/etc")
   ```
   This provides comprehensive guidance on creating custom YAML workflows.

2. **Create and Start Custom Workflow:**
   Follow the guidance to create a custom YAML workflow, then start it with:
   ```
   workflow_guidance(action="start", context="workflow: <workflow_name>\nyaml: <complete_yaml_content>")
   ```

3. **Continue with Schema Navigation:**
   Use `workflow_guidance` with `context="choose: <option>"` to navigate workflow nodes.

### Workflow Execution Process
1. **Mandatory Discovery**: ALWAYS start with `workflow_discovery()` for complex tasks
2. **Select Workflow**: Choose based on task requirements and workflow descriptions
3. **Initialize Session**: Use `workflow_guidance(action="start", context="workflow: Name")`
4. **Follow Schema**: Navigate using transitions defined in YAML schema
5. **Agent-Driven Navigation**: Make routing decisions based on schema-presented options

### Available Tools
- `workflow_discovery`: Discover and view available YAML workflows (OPTION 1)
- `workflow_creation_guidance`: Guide agent through creating custom YAML workflows (OPTION 2)
- `workflow_guidance`: Main tool for dynamic workflow execution with agent-driven workflow selection
- `workflow_state`: Tool for checking and updating workflow state
- Context7: Use for up-to-date documentation about technologies
- GitHub: Read files from other repositories when needed

### Key Principles
- **Workflow-driven approach**: ALWAYS start with either `workflow_discovery()` or `workflow_creation_guidance()` for complex tasks
- **Flexible workflow selection**: Choose existing workflows when suitable, create custom workflows when needed
- **No hardcoded routing**: All workflow behavior is determined by YAML schema definitions
- **Agent-driven selection**: You choose workflows and transitions based on schema-presented options
- **Schema as source of truth**: Workflow definitions in YAML files drive all behavior
- **Dynamic workflow creation**: Agents can create custom workflows tailored to specific task requirements
- **Legacy fallback preserved**: System falls back to legacy workflows when no YAML workflows are available
- If uncertain whether a task is "simple," err on the side of using the workflow tool
